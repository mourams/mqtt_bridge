mqtt:
  client:
    protocol: 4      # MQTTv311
    client_id: client1
    clean_session: False
  connection:
    host: localhost
    port: 8883
    keepalive: 5
  private_path: device/001
# Default is json serialiser, msgpack is more efficient
serializer: msgpack:dumps
deserializer: msgpack:loads
bridge:
  # ping pong
  - factory: mqtt_bridge.bridge:RosToMqttBridge
    msg_type: std_msgs.msg:Bool
    topic_from: /ping
    topic_to: ping
    latched: true
    qos: 2
  - factory: mqtt_bridge.bridge:MqttToRosBridge
    msg_type: std_msgs.msg:Bool
    topic_from: ping
    topic_to: /pong
    latched: true
    qos: 2
  # echo back
  - factory: mqtt_bridge.bridge:RosToMqttBridge
    msg_type: std_msgs.msg:String
    topic_from: /echo
    topic_to: echo
  - factory: mqtt_bridge.bridge:MqttToRosBridge
    msg_type: std_msgs.msg:String
    topic_from: echo
    topic_to: /back
  # private path
  - factory: mqtt_bridge.bridge:RosToMqttBridge
    msg_type: std_msgs.msg:String
    topic_from: /private/echo
    topic_to: ~/echo
  - factory: mqtt_bridge.bridge:MqttToRosBridge
    msg_type: std_msgs.msg:String
    topic_from: ~/echo
    topic_to: /private/back
# Dynamic Bridge Server: This server should almost always be enabled as it 
# responses to RemoteServer requests, and also faciliates the PublishBridge 
# and the SubscribeBride from the respective remote sides
  - factory: mqtt_bridge.bridge:DynamicBridgeServer
    control_topic: '__dynamic_server'
# A PublishBridge interacts with the DynamicBridgeServer and publishes anything that
# happens locally on the `topic_from` topic onto the `topic_to` topic at the remote end
  - factory: mqtt_bridge.bridge:PublishBridge
    control_topic: '__dynamic_server'
    msg_type: std_msgs.msg:String
    topic_from: /publish
    topic_to: /return
    latched: true
    qos: 2
# A SubscribeBridge interacts with the DynamicBridgeServer and publishes anything that
# happens on the remote topic `topic_from` topic onto the local `topic_to` topic
  - factory: mqtt_bridge.bridge:SubscribeBridge
    control_topic: '__dynamic_server'
    msg_type: std_msgs.msg:String
    topic_from: /A/in
    topic_to: /A/out
    latched: true
    qos: 2
# The RemoteService bridge allows to call a ROS server on the remote side, via the 
# DynamicBridgeServer that proxies the request on the remote side
  - factory: mqtt_bridge.bridge:RemoteService
    control_topic: '__dynamic_server'
    local_server: /local/service
    remote_server: /rosout/get_loggers
    srv_type:  roscpp.srv:GetLoggers

# The LocalServiceProxy bridge allows to call a local ROS server from the remote side, via the 
# DynamicBridgeServer that proxies the request locally. Hence, the DynamicBridgeServer needs to
# running locally (not just remotely)
  - factory: mqtt_bridge.bridge:LocalServiceProxy
    control_topic: '__dynamic_server'
    local_server: /rosout/get_loggers
    remote_server: /remote/service
    srv_type:  roscpp.srv:GetLoggers

# MqttRosServiceBridge example
  - factory: mqtt_bridge.bridge:MqttRosServiceBridge
    service_name: /rosout/get_loggers
    srv_type: roscpp.srv:GetLoggers
    request_topic: /rosout/get_loggers/request
    response_topic: /rosout/get_loggers/response
    qos: 2